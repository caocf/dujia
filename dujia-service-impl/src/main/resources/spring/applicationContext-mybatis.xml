<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 可读写 数据库连接池 -->
    <bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driver_name}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${write_db_url}"/>
        <property name="username" value="${write_db_username}"/>
        <property name="password" value="${write_db_password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${write_initial_size}"/>
        <property name="minIdle" value="${write_min_idle}"/>
        <property name="maxActive" value="${write_max_active}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters 
        <property name="filters" value="mergeStat,log4j"/>-->
    </bean>
    
    <!-- 只读 数据库连接池 -->
    <bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driver_name}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${read_db_url}"/>
        <property name="username" value="${read_db_username}"/>
        <property name="password" value="${read_db_password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${read_initial_size}"/>
        <property name="minIdle" value="${read_min_idle}"/>
        <property name="maxActive" value="${read_max_active}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters 
        <property name="filters" value="mergeStat,log4j"/>-->
    </bean>
    
    <!-- 读写分离 -->
    <bean id="dataSource" class="cn.com.gome.dujia.db.DynamicDataSource">  
    	<!-- 通过key-value的形式来关联数据源 -->  
    	<property name="targetDataSources">  
        	<map>  
        		<!-- 可读写 数据源 -->
            	<entry value-ref="writeDataSource" key="writeDataSource"/>
            	<!-- 只读 数据源 -->  
            	<entry value-ref="readDataSource" key="readDataSource"/>  
        	</map>  
    	</property>  
    	<property name="defaultTargetDataSource" ref="writeDataSource"/>  
	</bean>  
	

    <!-- 配置SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置文件 -->
        <property name="configLocation" value="classpath:/spring/mybatis-configuration.xml"/>
        <!-- 所有配置的mapper文件 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:mybatis/business/*.xml</value>
            </list>
        </property>
        <!-- 配置分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.gome.plan.mybatis.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 通过扫描的模式，扫描目录在cn.com.gome.dujia.mapper目录下 -->
    <bean class="com.gome.plan.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="cn.com.gome.dujia.mapper"/>
        <property name="properties">
            <value>
                mappers=com.gome.plan.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

</beans>